var express = require('express');
var fs = require('fs');
var request = require('request');
var cheerio = require('cheerio');
var app     = express();

var getUrl="https://www.leboncoin.fr/ventes_immobilieres/1081094795.htm?ca=12_s";

app.get('/scrape', function(req, res){

url = getUrl;

request(url, function(error, response, html){
    if(!error){
        var $ = cheerio.load(html);

    var goods, city, price, surface;
    var json = { goods : "", city : "",  price : "", surface : ""};

    $('.clearfix').filter(function(){
        var data = $(this);
        if(data.property == "Type de bien"){
        	goods = data.children().last().text();
        }
                   
        if(data.property == "Ville"){
        	city = data.children().last().text();
        } 

        $('.item_price clearfix').filter(function(){
        	price = data.children().content().text();
        }

        json.goods = goods;
        json.city = city;
        json.price = price;
        json.surface = surface;
    })

}

// To write to the system we will use the built in 'fs' library.
// In this example we will pass 3 parameters to the writeFile function
// Parameter 1 :  output.json - this is what the created filename will be called
// Parameter 2 :  JSON.stringify(json, null, 4) - the data to write, here we do an extra step by calling JSON.stringify to make our JSON easier to read
// Parameter 3 :  callback function - a callback function to let us know the status of our function

/*fs.writeFile('output.json', JSON.stringify(json, null, 4), function(err){

    console.log('File successfully written! - Check your project directory for the output.json file');

})*/

alert(goods);

// Finally, we'll just send out a message to the browser reminding you that this app does not have a UI.
res.send('Check your console!')

    }) ;
})